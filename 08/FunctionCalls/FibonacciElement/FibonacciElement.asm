
// init
	@256 // 0
	D=A // 1
	@SP // 2
	M=D // 3
// call Sys.init 0
	@Sys.init$ret.1 // 4
	D=A // 5
	@SP // 6
	A=M // 7
	M=D // 8
	@SP // 9
	M=M+1 // 10
// C_PUSH location LCL
	@LCL // 11
	D=M // 12
	@SP // 13
	A=M // 14
	M=D // 15
	@SP // 16
	M=M+1 // 17
// C_PUSH location ARG
	@ARG // 18
	D=M // 19
	@SP // 20
	A=M // 21
	M=D // 22
	@SP // 23
	M=M+1 // 24
// C_PUSH pointer 0
	@THIS // 25
	D=M // 26
	@SP // 27
	A=M // 28
	M=D // 29
	@SP // 30
	M=M+1 // 31
// C_PUSH pointer 1
	@THAT // 32
	D=M // 33
	@SP // 34
	A=M // 35
	M=D // 36
	@SP // 37
	M=M+1 // 38
	@SP // 39
	D=M // 40
	@5 // 41
	D=D-A // 42
	@0 // 43
	D=D-A // 44
	@ARG // 45
	M=D // 46
	@SP // 47
	D=M // 48
	@LCL // 49
	M=D // 50
// goto Sys.init
	@Sys.init // 51
	0;JMP // 52
(Sys.init$ret.1)
// function Main.fibonacci 0
(Main.fibonacci)
// C_PUSH argument 0
	@0 // 53
	D=A // 54
	@ARG // 55
	A=M+D // 56
	D=M // 57
	@SP // 58
	A=M // 59
	M=D // 60
	@SP // 61
	M=M+1 // 62
// C_PUSH constant 2
	@2 // 63
	D=A // 64
	@SP // 65
	A=M // 66
	M=D // 67
	@SP // 68
	M=M+1 // 69
// lt
	@SP // 70
	M=M-1 // 71
	@SP // 72
	A=M // 73
	D=M // 74
	@SP // 75
	M=M-1 // 76
	@SP // 77
	A=M // 78
	D=M-D // 79
	M=-1 // 80
	@FALSE_JUMP_73 // 81
	D;JLT // 82
	@SP // 83
	A=M // 84
	M=0 // 85
	(FALSE_JUMP_73) // 86
	@SP // 87
	M=M+1 // 88
// goto-if Main.fibonacci$IF_TRUE
	@SP // 89
	M=M-1 // 90
	A=M // 91
	D=M // 92
	@Main.fibonacci$IF_TRUE // 93
	D;JNE // 94
// goto Main.fibonacci$IF_FALSE
	@Main.fibonacci$IF_FALSE // 95
	0;JMP // 96
(Main.fibonacci$IF_TRUE)
// C_PUSH argument 0
	@0 // 97
	D=A // 98
	@ARG // 99
	A=M+D // 100
	D=M // 101
	@SP // 102
	A=M // 103
	M=D // 104
	@SP // 105
	M=M+1 // 106
// return
	@LCL // 107
	D=M // 108
	@R13 // 109
	M=D // 110
	@5 // 111
	D=D-A // 112
	A=D // 113
	D=M // 114
	@R14 // 115
	M=D // 116
	@SP // 117
	M=M-1 // 118
	A=M // 119
	D=M // 120
	@ARG // 121
	A=M // 122
	M=D // 123
	@ARG // 124
	D=M+1 // 125
	@SP // 126
	M=D // 127
	@R13 // 128
	A=M-1 // 129
	D=M // 130
	@THAT // 131
	M=D // 132
	@R2 // 133
	D=A // 134
	@R13 // 135
	A=M-D // 136
	D=M // 137
	@THIS // 138
	M=D // 139
	@R3 // 140
	D=A // 141
	@R13 // 142
	A=M-D // 143
	D=M // 144
	@ARG // 145
	M=D // 146
	@R4 // 147
	D=A // 148
	@R13 // 149
	A=M-D // 150
	D=M // 151
	@LCL // 152
	M=D // 153
	@R14 // 154
	A=M // 155
	0;JMP // 156
(Main.fibonacci$IF_FALSE)
// C_PUSH argument 0
	@0 // 157
	D=A // 158
	@ARG // 159
	A=M+D // 160
	D=M // 161
	@SP // 162
	A=M // 163
	M=D // 164
	@SP // 165
	M=M+1 // 166
// C_PUSH constant 2
	@2 // 167
	D=A // 168
	@SP // 169
	A=M // 170
	M=D // 171
	@SP // 172
	M=M+1 // 173
// sub
	@SP // 174
	M=M-1 // 175
	@SP // 176
	A=M // 177
	D=M // 178
	@SP // 179
	M=M-1 // 180
	@SP // 181
	A=M // 182
	M=M-D // 183
	@SP // 184
	M=M+1 // 185
// call Main.fibonacci 1
	@Main.fibonacci$ret.1 // 186
	D=A // 187
	@SP // 188
	A=M // 189
	M=D // 190
	@SP // 191
	M=M+1 // 192
// C_PUSH location LCL
	@LCL // 193
	D=M // 194
	@SP // 195
	A=M // 196
	M=D // 197
	@SP // 198
	M=M+1 // 199
// C_PUSH location ARG
	@ARG // 200
	D=M // 201
	@SP // 202
	A=M // 203
	M=D // 204
	@SP // 205
	M=M+1 // 206
// C_PUSH pointer 0
	@THIS // 207
	D=M // 208
	@SP // 209
	A=M // 210
	M=D // 211
	@SP // 212
	M=M+1 // 213
// C_PUSH pointer 1
	@THAT // 214
	D=M // 215
	@SP // 216
	A=M // 217
	M=D // 218
	@SP // 219
	M=M+1 // 220
	@SP // 221
	D=M // 222
	@5 // 223
	D=D-A // 224
	@1 // 225
	D=D-A // 226
	@ARG // 227
	M=D // 228
	@SP // 229
	D=M // 230
	@LCL // 231
	M=D // 232
// goto Main.fibonacci
	@Main.fibonacci // 233
	0;JMP // 234
(Main.fibonacci$ret.1)
// C_PUSH argument 0
	@0 // 235
	D=A // 236
	@ARG // 237
	A=M+D // 238
	D=M // 239
	@SP // 240
	A=M // 241
	M=D // 242
	@SP // 243
	M=M+1 // 244
// C_PUSH constant 1
	@1 // 245
	D=A // 246
	@SP // 247
	A=M // 248
	M=D // 249
	@SP // 250
	M=M+1 // 251
// sub
	@SP // 252
	M=M-1 // 253
	@SP // 254
	A=M // 255
	D=M // 256
	@SP // 257
	M=M-1 // 258
	@SP // 259
	A=M // 260
	M=M-D // 261
	@SP // 262
	M=M+1 // 263
// call Main.fibonacci 1
	@Main.fibonacci$ret.2 // 264
	D=A // 265
	@SP // 266
	A=M // 267
	M=D // 268
	@SP // 269
	M=M+1 // 270
// C_PUSH location LCL
	@LCL // 271
	D=M // 272
	@SP // 273
	A=M // 274
	M=D // 275
	@SP // 276
	M=M+1 // 277
// C_PUSH location ARG
	@ARG // 278
	D=M // 279
	@SP // 280
	A=M // 281
	M=D // 282
	@SP // 283
	M=M+1 // 284
// C_PUSH pointer 0
	@THIS // 285
	D=M // 286
	@SP // 287
	A=M // 288
	M=D // 289
	@SP // 290
	M=M+1 // 291
// C_PUSH pointer 1
	@THAT // 292
	D=M // 293
	@SP // 294
	A=M // 295
	M=D // 296
	@SP // 297
	M=M+1 // 298
	@SP // 299
	D=M // 300
	@5 // 301
	D=D-A // 302
	@1 // 303
	D=D-A // 304
	@ARG // 305
	M=D // 306
	@SP // 307
	D=M // 308
	@LCL // 309
	M=D // 310
// goto Main.fibonacci
	@Main.fibonacci // 311
	0;JMP // 312
(Main.fibonacci$ret.2)
// add
	@SP // 313
	M=M-1 // 314
	@SP // 315
	A=M // 316
	D=M // 317
	@SP // 318
	M=M-1 // 319
	@SP // 320
	A=M // 321
	M=M+D // 322
	@SP // 323
	M=M+1 // 324
// return
	@LCL // 325
	D=M // 326
	@R13 // 327
	M=D // 328
	@5 // 329
	D=D-A // 330
	A=D // 331
	D=M // 332
	@R14 // 333
	M=D // 334
	@SP // 335
	M=M-1 // 336
	A=M // 337
	D=M // 338
	@ARG // 339
	A=M // 340
	M=D // 341
	@ARG // 342
	D=M+1 // 343
	@SP // 344
	M=D // 345
	@R13 // 346
	A=M-1 // 347
	D=M // 348
	@THAT // 349
	M=D // 350
	@R2 // 351
	D=A // 352
	@R13 // 353
	A=M-D // 354
	D=M // 355
	@THIS // 356
	M=D // 357
	@R3 // 358
	D=A // 359
	@R13 // 360
	A=M-D // 361
	D=M // 362
	@ARG // 363
	M=D // 364
	@R4 // 365
	D=A // 366
	@R13 // 367
	A=M-D // 368
	D=M // 369
	@LCL // 370
	M=D // 371
	@R14 // 372
	A=M // 373
	0;JMP // 374
// function Sys.init 0
(Sys.init)
// C_PUSH constant 4
	@4 // 375
	D=A // 376
	@SP // 377
	A=M // 378
	M=D // 379
	@SP // 380
	M=M+1 // 381
// call Main.fibonacci 1
	@Main.fibonacci$ret.3 // 382
	D=A // 383
	@SP // 384
	A=M // 385
	M=D // 386
	@SP // 387
	M=M+1 // 388
// C_PUSH location LCL
	@LCL // 389
	D=M // 390
	@SP // 391
	A=M // 392
	M=D // 393
	@SP // 394
	M=M+1 // 395
// C_PUSH location ARG
	@ARG // 396
	D=M // 397
	@SP // 398
	A=M // 399
	M=D // 400
	@SP // 401
	M=M+1 // 402
// C_PUSH pointer 0
	@THIS // 403
	D=M // 404
	@SP // 405
	A=M // 406
	M=D // 407
	@SP // 408
	M=M+1 // 409
// C_PUSH pointer 1
	@THAT // 410
	D=M // 411
	@SP // 412
	A=M // 413
	M=D // 414
	@SP // 415
	M=M+1 // 416
	@SP // 417
	D=M // 418
	@5 // 419
	D=D-A // 420
	@1 // 421
	D=D-A // 422
	@ARG // 423
	M=D // 424
	@SP // 425
	D=M // 426
	@LCL // 427
	M=D // 428
// goto Main.fibonacci
	@Main.fibonacci // 429
	0;JMP // 430
(Main.fibonacci$ret.3)
(Sys.init$WHILE)
// goto Sys.init$WHILE
	@Sys.init$WHILE // 431
	0;JMP // 432