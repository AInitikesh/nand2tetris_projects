// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        let screen = 16384;
        do Screen.clearScreen();
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8191) {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int loc, mask;
        let loc = (x / 16) + (y * 32);
        let mask = twoToThe[x & 15];
        if(color){
            let screen[loc] = screen[loc] | mask;
        }else{
            let screen[loc] = screen[loc] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int diff, dx, dy, a, b, x, y, cDiff;
        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        let a = 0;
        let b = 0;
        let diff = 0;
        while((~(a > dx)) & (~(b > dy))){
            if (x1 < x2){
                let x = x1 + a;
            }
            else{
                let x = x1 - a;
            }
            if (y1 < y2){
                let y = y1 + b;
            }
            else{
                let y = y1 - b;
            }
            do Screen.drawPixel(x, y);
            
            let cDiff = diff;
            if (cDiff < 0){
                let a = a + 1;
                let diff = diff + dy;
            } 
            if (cDiff > 0) {
                let b = b + 1;
                let diff = diff - dx;
            }
            if (cDiff = 0) {
                if (dx > dy){
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int minx, miny, maxx, maxy;
        let miny = Math.min(y1, y2);
        let minx = Math.min(x1, x2);
        let maxy = Math.max(y1, y2);
        let maxx = Math.max(x1, x2);
        while (miny < maxy){
            do Screen.drawLine(minx, miny, maxx, miny);
            let miny = miny + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, sqrt;
        let dy = -r;
        while (~(dy > r)){
            let sqrt = Math.sqrt(Math.abs((r * r) - (dy * dy)));
            do Screen.drawLine(x - sqrt, y + dy, x + sqrt, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
