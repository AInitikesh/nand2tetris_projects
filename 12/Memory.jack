// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int freeList;
    static Array heap, ram;
    

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = heap;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int next, base, block;
        let base = 2048;
        let next = freeList - base;
        if (heap[next] = 0){
            if (heap[next + 1] > (size + 1)){
                let heap[next + 1] = heap[next + 1] - size - 2;
                let block = heap[next] + heap[next + 1] + 1;
                let heap[block] = 0;
                let heap[block + 1] = size;
                return block + 2;
            }
            return 0;
        }
        else {
            while(~(heap[next] = 0)){
                if (heap[next + 1] > (size + 1)){
                   let heap[next + 1] = heap[next + 1] - size - 2;
                    let block = heap[next] + heap[next + 1] + 1;
                    let heap[block] = 0;
                    let heap[block + 1] = size;
                    return block + 2;
                }
                let next = heap[next] - base;
            }
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int base, size, next;
        let base = 2048;
        let next = freeList - base;
        while (~(heap[next] = 0)){
            let next = heap[next] - base;
        }
        let heap[next] = o[-2];
        return;
    }    
}
