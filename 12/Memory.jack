// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array heap, ram;
    Field int freeList;


    /** Initializes the class. */
    function void init() {
        let ram = 0
        let heap = 2048;
        let freeList = heap
        let heap[0] = 0;
        let heap[1] = 14334;

    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address]
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        ram[address] = value
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        
        let freeList = heap;
        while(freeList != 0) {
            let next = heap[freeList];
            if(heap[freeList + 1] >= size) {
                let base = freeList;
                freeList = heap[freeList + 1];
                heap[base + 1] = freeList;
                heap[base + 2] = size;
                return base;
            }
            freeList = next;
        }
        
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let base = o[0];
        let size = o[1];
        heap[base + 1] = heap[freeList];
        heap[freeList] = base;
        heap[freeList + 1] = size;
        freeList = base;
    }    
}
